<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>SlackTranslator</title>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <h1>SlackTranslator</h1>
  <div id="container">
    <div id="originals" class="column">
      <h2>Original Messages</h2>
      <ul id="original-messages"></ul>
    </div>
    <div id="translations" class="column">
      <h2>Translated Messages</h2>
      <ul id="translated-messages"></ul>
    </div>
  </div>

  <script>
    console.log('Iniciando aplicativo SlackTranslator...');
    
    const origList = document.getElementById('original-messages');
    const transList = document.getElementById('translated-messages');
    
    // Array de perfis aleatórios para simular diferentes usuários
    const userProfiles = [
      { name: 'Alex Wong', avatar: 'https://i.pravatar.cc/100?img=3' },
      { name: 'John Smith', avatar: 'https://i.pravatar.cc/100?img=5' },
      { name: 'Sarah Johnson', avatar: 'https://i.pravatar.cc/100?img=9' },
      { name: 'Maria Garcia', avatar: 'https://i.pravatar.cc/100?img=10' }
    ];

    function formatTimestamp(timestamp) {
      if (!timestamp) timestamp = Date.now();
      
      const date = new Date(timestamp);
      const now = new Date();
      const yesterdayDate = new Date(now);
      yesterdayDate.setDate(now.getDate() - 1);
      
      // Formato para hora - 1:15 PM
      const timeStr = date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
      
      // Se for hoje ou ontem, mostrar isso em vez da data
      if (date.toDateString() === now.toDateString()) {
        return timeStr;
      } else if (date.toDateString() === yesterdayDate.toDateString()) {
        return 'yesterday ' + timeStr;
      } else {
        // Se for mais antigo, mostrar data abreviada
        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) + ' ' + timeStr;
      }
    }
    
    // Acompanhamento da última pessoa a enviar mensagem para criação de mensagens sequenciais
    let lastSender = { original: null, translated: null };
    
    function addMessage(original, translation, sentByUser = false, timestamp = Date.now(), userData = null) {
      console.log('Adicionando nova mensagem:', original);
      
      // Determinar usuário para a mensagem
      let user;
      console.log('userData recebido:', userData);
      
      // Verificar se a mensagem foi enviada pelo usuário atual (via flag sent_by_me do backend)
      if (userData && userData.sent_by_me) {
        console.log('Mensagem identificada como enviada por você (current user)!');
        user = { 
          name: 'You', 
          avatar: userData.user_image,
          id: userData.user_id || 'your-id' // Usar ID do usuário para agrupamento
        };
      } else if (userData) {
        // Extrair corretamente os campos enviados pelo servidor
        // Usar diretamente os nomes de campos como são enviados pelo backend (username e user_image)
        user = {
          name: userData.username || 'Unknown User',
          avatar: userData.user_image,
          id: userData.user_id || `user-${Date.now()}` // Usar ID do usuário ou gerar um temporário
        };
        console.log('Dados de usuário originais:', userData);
        console.log('Usando dados de usuário fornecidos:', user);
        console.log('Nome do usuário usado:', user.name);
        console.log('ID do usuário para agrupamento:', user.id);
      } else {
        // Se não temos dados do usuário, usar fallback
        const randomProfile = userProfiles[Math.floor(Math.random() * userProfiles.length)];
        user = {
          name: randomProfile.name,
          avatar: randomProfile.avatar,
          id: `random-${Date.now()}` // Gerar ID aleatório para que cada mensagem seja tratada como de um usuário diferente
        };
        console.log('Usando perfil aleatório para mensagem sem dados de usuário:', user);
      }
      
      // Verificar se é uma mensagem sequencial do mesmo remetente usando o ID do usuário
      // O ID é muito mais confiável que o nome para diferenciar remetentes
      const isFollowUp = {
        original: user.id && lastSender.originalId === user.id,
        translated: user.id && lastSender.translatedId === user.id
      };
      
      console.log(`Mensagem de ${user.name} (ID: ${user.id}): é follow-up? ${isFollowUp.original}`);
      
      // Atualizar o último remetente com nome E ID
      lastSender.originalId = user.id;
      lastSender.translatedId = user.id;
      lastSender.originalName = user.name;
      lastSender.translatedName = user.name;

      // Formatar o timestamp
      const timeStr = formatTimestamp(timestamp);
      
      // Verificar se a mensagem contém o nome do usuário no formato "Username: message"
      // e remover a repetição se existir
      let cleanOriginal = original;
      let cleanTranslation = translation;
      
      // Padrão para detectar "Nome: mensagem"
      // Usamos uma abordagem mais flexível para não depender da correspondência exata de nomes
      const usernamePattern = user.name ? new RegExp(`^${user.name.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}:\s*(.+)$`) : null;
      
      // Remover o prefixo de nome da mensagem original
      const originalMatch = cleanOriginal.match(usernamePattern);
      if (originalMatch) {
        cleanOriginal = originalMatch[1];
      }
      
      // Remover o prefixo de nome da mensagem traduzida
      const translationMatch = cleanTranslation.match(usernamePattern);
      if (translationMatch) {
        cleanTranslation = translationMatch[1];
      }
      
      // Criar elemento para avatar com fallback para iniciais se a imagem falhar
      const avatarStyle = user.avatar ? 
        `background-image: url('${user.avatar}')` : 
        `background-color: #4A154B; color: white; display: flex; align-items: center; justify-content: center; font-weight: bold;`;
      
      const avatarContent = user.avatar ? '' : `<span>${(user.name || 'User').split(' ').map(part => part[0]).join('').substring(0, 2).toUpperCase()}</span>`;
      
      // Criar elemento para mensagem original no estilo Slack
      const origItem = document.createElement('div');
      origItem.className = 'message' + (sentByUser ? ' user-message' : '') + (isFollowUp.original ? ' follow-up' : '');
      origItem.innerHTML = `
        <div class="avatar" style="${avatarStyle}">${avatarContent}</div>
        <div class="message-content">
          <div class="message-header">
            <span class="username">${user.name}</span>
            <span class="timestamp">${timeStr}</span>
          </div>
          <div class="message-text">${cleanOriginal}</div>
        </div>
      `;
      
      // Criar elemento para mensagem traduzida no estilo Slack
      const transItem = document.createElement('div');
      transItem.className = 'message' + (sentByUser ? ' user-message' : '') + (isFollowUp.translated ? ' follow-up' : '');
      transItem.innerHTML = `
        <div class="avatar" style="${avatarStyle}">${avatarContent}</div>
        <div class="message-content">
          <div class="message-header">
            <span class="username">${user.name}</span>
            <span class="timestamp">${timeStr}</span>
          </div>
          <div class="message-text">${cleanTranslation}</div>
        </div>
      `;
      
      // Adicionar classes para animação de destaque para novas mensagens
      origItem.classList.add('new-message');
      transItem.classList.add('new-message');
      
      // Adicionar ao DOM
      origList.appendChild(origItem);
      transList.appendChild(transItem);
      
      // Scroll para mostrar as mensagens mais recentes
      origList.scrollTop = origList.scrollHeight;
      transList.scrollTop = transList.scrollHeight;
    }
    
    function loadInitialMessages() {
      console.log('Carregando mensagens iniciais...');
      fetch('/messages')
        .then(response => response.json())
        .then(messages => {
          console.log('Mensagens carregadas:', messages);
          
          // Limpar mensagens existentes
          origList.innerHTML = '';
          transList.innerHTML = '';
          
          // Resetar o tracking do último remetente
          lastSender = {
            originalId: null,
            translatedId: null,
            originalName: null,
            translatedName: null
          };
          
          // Processar mensagens com seus respectivos usuários e timestamps
          messages.forEach((msg) => {
            console.log('Processando mensagem carregada:', msg);
            
            // Manter os dados de usuário exatamente como são recebidos do servidor
            // para garantir que o addMessage possa processá-los corretamente
            // NÃO criar um novo objeto com diferentes nomes de propriedades
            
            // Usar diretamente o objeto msg, que já contém username e user_image
            const userData = msg;
            
            // Verificar o conteúdo para fins de debug
            console.log('Mensagem original:', msg);
            console.log('Username recebido do servidor:', msg.username);
            console.log('User image recebido do servidor:', msg.user_image);
            
            // Gerar avatar com iniciais apenas se não houver imagem de usuário
            if (!msg.user_image && msg.username) {
              msg.user_image = `https://ui-avatars.com/api/?name=${encodeURIComponent(msg.username)}&background=random`;
            }
            
            // Usar nome genérico apenas se não houver username
            if (!msg.username) {
              if (msg.original && msg.original.match(/^(.+?):\s*(.+)$/)) {
                msg.username = msg.original.match(/^(.+?):\s*(.+)$/)[1];
              } else {
                msg.username = "Usuário";
              }
            }
            
            // Verificar se a mensagem foi enviada pelo usuário atual usando o flag sent_by_me do backend
            // Importante: usamos sent_by_me e não sent_by_user para manter consistência com o backend
            console.log('Verificando se mensagem é do usuário atual:', msg.sent_by_me);
            
            // Adicionar a mensagem com as informações reais do usuário
            // Nota: Removemos o parâmetro sentByUser que não é mais necessário pois estamos usando sent_by_me diretamente do userData
            addMessage(
              msg.original, 
              msg.translation, 
              false, // Valor não será mais usado, pois userData.sent_by_me terá prioridade
              msg.timestamp * 1000, // Converter timestamp para milissegundos
              userData
            );
          });
        })
        .catch(error => {
          console.error('Erro ao carregar mensagens:', error);
        });
    }
    
    window.addEventListener('load', function() {
      loadInitialMessages();
      
      setInterval(function() {
        fetch('/messages')
          .then(response => response.json())
          .then(messages => {
            if (origList.children.length !== messages.length) {
              loadInitialMessages();
            }
          })
          .catch(error => console.error('Erro ao atualizar mensagens:', error));
      }, 3000);
    });
  </script>
  <div style="margin-top: 20px; text-align: center;">
    <button id="test-button">Testar Mensagem</button>
    <p id="status-message" style="color: green; display: none;">Mensagem de teste enviada!</p>
  </div>
  
  <div id="message-form" style="margin-top: 30px; padding: 20px; background-color: #f5f5f5; border-radius: 8px;">
    <h3>Enviar mensagem para o Slack</h3>
    <div style="display: flex; flex-direction: column; gap: 10px;">
      <textarea id="message-input" placeholder="Escreva sua mensagem em português..." rows="4" style="padding: 8px; border-radius: 4px; border: 1px solid #ccc;"></textarea>
      <div style="display: flex; gap: 10px; justify-content: space-between;">
        <div style="flex-grow: 1; background-color: #eee; padding: 8px; border-radius: 4px; min-height: 50px;">
          <p style="margin: 0 0 5px 0; font-size: 0.8em; color: #666;">Visualização da tradução:</p>
          <p id="translation-preview" style="margin: 0; font-style: italic;">A tradução aparecerá aqui...</p>
        </div>
        <div style="display: flex; flex-direction: column; gap: 10px; justify-content: center;">
          <button id="translate-button" style="padding: 8px 16px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;">Traduzir</button>
          <button id="send-button" style="padding: 8px 16px; background-color: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer;" disabled>Enviar</button>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    document.getElementById('test-button').addEventListener('click', function() {
      const statusEl = document.getElementById('status-message');
      statusEl.style.display = 'block';
      statusEl.textContent = 'Enviando mensagem de teste...';
      
      fetch('/test-message')
        .then(response => response.json())
        .then(data => {
          console.log('Teste enviado com sucesso:', data);
          statusEl.textContent = 'Mensagem de teste enviada!';
          
          // Adicionar a mensagem de teste usando as informações reais do usuário
          // Não marcar como enviado pelo usuário (false)
          // Isso permite que os dados do usuário sejam exibidos corretamente
          console.log('Dados recebidos da API para mensagem de teste:', data);
          addMessage(data.original, data.translation, false, Date.now(), data);
          
          setTimeout(() => {
            statusEl.style.display = 'none';
          }, 3000);
        })
        .catch(error => {
          console.error('Erro ao enviar teste:', error);
          statusEl.textContent = 'Erro ao enviar mensagem de teste';
          statusEl.style.color = 'red';
        });
    });
    
    // Código para o formulário de envio de mensagem
    const messageInput = document.getElementById('message-input');
    const translationPreview = document.getElementById('translation-preview');
    const translateButton = document.getElementById('translate-button');
    const sendButton = document.getElementById('send-button');
    
    let currentTranslation = null;
    
    // Função para traduzir o texto
    translateButton.addEventListener('click', function() {
      const messageText = messageInput.value.trim();
      
      if (!messageText) {
        translationPreview.textContent = 'Por favor, escreva uma mensagem primeiro.';
        translationPreview.style.color = 'red';
        return;
      }
      
      translationPreview.textContent = 'Traduzindo...';
      translationPreview.style.color = '';
      sendButton.disabled = true;
      
      // Enviando o texto para tradução via API
      fetch('/translate-to-english', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ text: messageText })
      })
      .then(response => response.json())
      .then(data => {
        if (data.translation) {
          translationPreview.textContent = data.translation;
          currentTranslation = data.translation;
          sendButton.disabled = false;
        } else {
          translationPreview.textContent = 'Erro ao traduzir: ' + (data.error || 'Erro desconhecido');
          translationPreview.style.color = 'red';
          sendButton.disabled = true;
        }
      })
      .catch(error => {
        console.error('Erro na tradução:', error);
        translationPreview.textContent = 'Erro ao traduzir. Tente novamente.';
        translationPreview.style.color = 'red';
        sendButton.disabled = true;
      });
    });
    
    // Função para enviar a mensagem traduzida
    sendButton.addEventListener('click', function() {
      if (!currentTranslation) {
        return;
      }
      
      sendButton.disabled = true;
      sendButton.textContent = 'Enviando...';
      
      // Enviando a mensagem traduzida para o Slack
      fetch('/send-to-slack', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          original: messageInput.value.trim(),
          translation: currentTranslation
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // NÃO adicionar a mensagem localmente - vamos apenas esperar o backend atualizar
          // O backend já adicionou a mensagem com os detalhes corretos do usuário do Slack
          console.log('Mensagem enviada com sucesso, aguardando atualização do servidor...');
          
          // Limpar o formulário após envio bem-sucedido
          messageInput.value = '';
          translationPreview.textContent = 'Mensagem enviada com sucesso!';
          translationPreview.style.color = 'green';
          currentTranslation = null;
          
          // Forçar uma atualização imediata das mensagens
          setTimeout(() => loadInitialMessages(), 500);
          
          setTimeout(() => {
            translationPreview.textContent = 'A tradução aparecerá aqui...';
            translationPreview.style.color = '';
          }, 3000);
        } else {
          translationPreview.textContent = 'Erro ao enviar: ' + (data.error || 'Erro desconhecido');
          translationPreview.style.color = 'red';
          sendButton.disabled = false;
        }
      })
      .catch(error => {
        console.error('Erro ao enviar mensagem:', error);
        translationPreview.textContent = 'Erro ao enviar. Tente novamente.';
        translationPreview.style.color = 'red';
        sendButton.disabled = false;
      })
      .finally(() => {
        sendButton.textContent = 'Enviar';
      });
    });
    
    // Desabilitar botão de envio quando o texto for alterado
    messageInput.addEventListener('input', function() {
      sendButton.disabled = true;
      if (messageInput.value.trim()) {
        translationPreview.textContent = 'Clique em "Traduzir" para ver a prévia da tradução.';
        translationPreview.style.color = '';
      } else {
        translationPreview.textContent = 'A tradução aparecerá aqui...';
        translationPreview.style.color = '';
      }
    });
  </script>
</body>
</html>
